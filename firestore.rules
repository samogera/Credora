
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Default allow reads for authenticated users, lock down writes.
    // This allows UI components like partner dashboards to fetch lists.
    // Write security is handled on a per-collection basis below.
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Deny all writes by default
    }

    // users: A user can create their own document and update it.
    // No one else can.
    match /users/{userId} {
      allow create, update: if request.auth.uid == userId;
    }
    
    // partners: The demo partner can update their profile.
    // Product creation/deletion is handled in the subcollection.
    match /partners/{partnerId} {
        // For the demo, only a specific UID can act as the partner
        allow update: if request.auth.uid == 'partner-1-uid'; // Use a placeholder UID
        
        match /products/{productId} {
             // Only the demo partner can manage their products
             allow create, delete: if request.auth.uid == 'partner-1-uid';
        }
    }

    // applications:
    // - Users can create applications for themselves.
    // - The assigned partner can update the status.
    match /applications/{appId} {
      allow create: if request.resource.data.userId == request.auth.uid;

      // Only allow 'status' field to be updated, and only by the demo partner
      allow update: if request.auth.uid == 'partner-1-uid'
                    && request.resource.data.keys().hasOnly(['status']);
    }

    // notifications:
    // - Can be created by the system (simulated by authenticated users for now).
    // - Can be updated (to be marked as 'read') only by the recipient.
    match /notifications/{notifId} {
      allow create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.userId 
                    && request.resource.data.keys().hasOnly(['read']);
    }
  }
}
