rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read/write their own profile data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Partners can be read by any authenticated user, but only written by admins (future)
    match /partners/{partnerId} {
      allow read: if request.auth != null;
      allow write: if false; // Locked down for now

      // Products can be read by anyone, but only managed by the partner (future)
      match /products/{productId} {
        allow read: if request.auth != null;
        allow write: if false; // Locked down for now
      }
    }
    
    // Application rules: users can create, read their own. Partners can read all.
    match /applications/{appId} {
      allow create: if request.auth != null;
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) || isPartner();
      allow update(status): if isPartner();
    }
    
    // Notification rules
    match /notifications/{notifId} {
        allow create: if request.auth != null; // Anyone can create a notification (user app, partner decision)
        allow read, update(read): if (request.auth != null && resource.data.userId == request.auth.uid) || (resource.data.for == 'partner' && isPartner());
    }

    // A helper function to check if the authenticated user is a partner.
    // In a real app, this might check a custom claim on the user's token.
    // For this simulation, we'll allow any authenticated user to act as a partner for reads.
    function isPartner() {
      return request.auth != null;
    }
  }
}
